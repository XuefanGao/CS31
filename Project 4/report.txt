//  report.txt
//  Xuefan Gao
//  205555927
//  CS31 Project4

a. I did not encounter any major obstacles in this project.
When I first finish coding up my project, I tested it using codeboard and there
were some segmentation faults. Then I started writing test cases and debug my
project step by step as I finished testing each functions. After I passed all my
test cases, my code also passed all the tests in code board.

b.
Below are my test cases. My program handles all of them correctly.
int main() {
    //test locate Maximum
    string a[5] = {"a", "a", "c", "d", "e"};
    string b[5] = {"5", "4", "3", "2", "2"};
    assert(locateMaximum(a, 3) == 2);
    assert(locateMaximum(a, 5) == 4);
    assert(locateMaximum(b, 1) == 0);
    assert(locateMaximum(b, 5) == 0);
    // test duplicatedValues
    string c[2] = {"e", "e"};
    assert(hasDuplicatedValues(c, 2));
    assert(!hasDuplicatedValues(c, 1));
    assert(hasDuplicatedValues(a, 3));
    assert(!hasDuplicatedValues(b, 4));
    assert(hasDuplicatedValues(b, 5));
    assert(hasDuplicatedValues(a, 2));
    assert(!hasDuplicatedValues(c, 0));
    // test countAllVowels
    assert(countAllVowels(a, 0)==-1);
    assert(countAllVowels(a, 1)==1);
    assert(countAllVowels(a, 2)==2);
    assert(countAllVowels(a, 3)==2);
    assert(countAllVowels(a, 5)==3);
    assert(countAllVowels(b, 5)==0);
    string v[7] = {"ag05eaea", "ikl", "qo", "uu", "Yp", "AETTIOU", "yyy"};
    assert(countAllVowels(v, 7)==18);
    assert(countAllVowels(v, 1)==5);
    // test move to end
    //eacda
    assert(moveToEnd(a, 5, 0)==0);
    assert(a[0] == "e");
    assert(a[4] == "a");
    //eacda
    assert(moveToEnd(a, 5, 1)==1);
    assert(a[1] == "a");
    assert(a[4] == "a");
    //eaadc
    assert(moveToEnd(a, 5, 2)==2);
    assert(a[2] == "a");
    assert(a[4] == "c");
    assert(moveToEnd(a, 5, 4)==4);
    assert(a[4] == "c");
    // test countIntegers
    assert(countIntegers(b, 1) == 1);
    assert(countIntegers(b, 5) == 5);
    string i[5] = {"1q1", "303", "o8", "0", "-4"};
    assert(countIntegers(i, 1) == 0);
    assert(countIntegers(i, 2) == 1);
    assert(countIntegers(i, 3) == 1);
    assert(countIntegers(i, 4) == 2);
    assert(countIntegers(i, 5) == 2);
    assert(countIntegers(a, 5) == 0);
    // test rotateRight
    string r[5] = {"a", "b", "c", "d", "e"};
    assert(rotateRight(r, 4, 0) == 0);
    assert(r[0] == "a");
    assert(r[1] == "b");
    assert(r[2] == "c");
    assert(r[3] == "d");
    assert(r[4] == "e");
    //cdabe
    assert(rotateRight(r, 4, 2) == 8);
    assert(r[0] == "c");
    assert(r[1] == "d");
    assert(r[2] == "a");
    assert(r[3] == "b");
    assert(r[4] == "e");
    assert(rotateRight(r, 4, 2) == 8);
    assert(r[0] == "a");
    assert(r[1] == "b");
    assert(r[2] == "c");
    assert(r[3] == "d");
    assert(r[4] == "e");
    assert(rotateRight(r, 1, 0) == 0);
    assert(r[0] == "a");
    assert(r[1] == "b");
    assert(r[2] == "c");
    assert(r[3] == "d");
    assert(r[4] == "e");
    assert(rotateRight(r, 5, 3) == 15);
    assert(r[0] == "c");
    assert(r[1] == "d");
    assert(r[2] == "e");
    assert(r[3] == "a");
    assert(r[4] == "b");
    // test shiftLeft
    string s[5] = {"a", "b", "c", "d", "e"};
    assert(shiftLeft(s, 5, 2, "0")==2);
    assert(s[0] == "c");
    assert(s[1] == "d");
    assert(s[2] == "e");
    assert(s[3] == "0");
    assert(s[4] == "0");
    string s1[5] = {"a", "b", "c", "d", "e"};
    assert(shiftLeft(s1, 5, 7, "0")==5);
    assert(s1[0] == "0");
    assert(s1[1] == "0");
    assert(s1[2] == "0");
    assert(s1[3] == "0");
    assert(s1[4] == "0");
    string s2[5] = {"a", "b", "c", "d", "e"};
    assert(shiftLeft(s2, 3, 2, "0")==2);
    assert(s2[0] == "c");
    assert(s2[1] == "0");
    assert(s2[2] == "0");
    assert(s2[3] == "d");
    assert(s2[4] == "e");

    // test cases in project documentations
    string folks[8] = { "samwell", "jon", "margaery", "daenerys", "tyrion", "sansa", "llewmas", "noj" };
    string values[5] = { "jon", "mamabbcc!", "jon", "123", "45" };
    assert(locateMaximum( folks, 5 ) == 4);
    assert(locateMaximum( folks, 4 ) == 0);
    assert(hasDuplicatedValues( folks, 8 ) == false);
    assert(hasDuplicatedValues( values, 5 ) == true);
    assert(countAllVowels( folks, 5 ) == 14);
    assert(countAllVowels( folks, 8 ) == 19);
    assert(countIntegers( values, 5 ) == 2);
    assert(countIntegers( folks, 5) == 0);
//    tested
//    assert(moveToEnd( folks, 5, 1 ) == 1);
//    assert(folks[1] == "tyrion");
//    assert(folks[4] == "jon");
//    // tested
//    assert(rotateRight(folks,5,1) == 5);
//    assert(folks[ 0 ] == "tyrion");
//    assert(folks[ 1 ] == "samwell");
//    assert(folks[ 2 ] == "jon");
//    assert(folks[ 3 ] == "margaery");
//    assert(folks[ 4 ] == "daenerys");
//    // tested
//    assert(rotateRight( folks, 5, 2 ) == 10);
//    assert(folks[ 1 ] == "tyrion");
//    assert(folks[ 2 ] == "samwell");
//    assert(folks[ 3 ] == "jon");
//    assert(folks[ 4 ] == "margaery");
//    assert(folks[ 0 ] == "daenerys");
//    //
//    assert(shiftLeft( folks, 5, 1, "foo" ) == 1);
//    assert(folks[ 0 ] == "jon");
//    assert(folks[ 1 ] == "margaery");
//    assert(folks[ 2 ] == "daenerys");
//    assert(folks[ 3 ] == "tyrion" );
//    assert(folks[ 4 ] == "foo");
    //
    assert(shiftLeft( folks, 5, 2, "foo" ) == 2);
    assert(folks[ 4 ] == "foo");
    assert(folks[ 0 ] == "margaery");
    assert(folks[ 1 ] == "daenerys");
    assert(folks[ 2 ] == "tyrion" );
    assert(folks[ 3 ] == "foo");

    string x[6] = { "123", "456", "delta", "gamma", "beta", "delta" };
    assert(hasDuplicatedValues(x, 6 ) == true);
    assert(hasDuplicatedValues(x, 3 ) == false);

    //cout << "finished";
    return 0;
}
